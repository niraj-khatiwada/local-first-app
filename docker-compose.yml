services:
  server:
    container_name: nestjs-boilerplate-server
    image: nestjs-boilerplate-server:latest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - IS_WORKER=false
    ports:
      - '${APP_PORT}:${APP_PORT}'
    networks:
      - nestjs-boilerplate-network
    depends_on:
      - redis

  database:
    image: postgres:16.2-alpine
    container_name: nestjs-boilerplate-postgres
    shm_size: 1g
    restart: unless-stopped
    environment:
      POSTGRES_USER: '${DATABASE_USERNAME}'
      POSTGRES_PASSWORD: '${DATABASE_PASSWORD}'
      POSTGRES_DB: '${DATABASE_NAME}'
      TZ: 'UTC'
    ports:
      - '${DOCKER_DATABASE_PORT}:5432'
    volumes:
      - ./.docker/data/postgres:/var/lib/postgresql/data
      - ./.docker/postgres-entrypoint:/docker-entrypoint-initdb.d
    command: |
      postgres 
      -c wal_level=logical
      -c max_wal_senders=10 
      -c max_replication_slots=5 
      -c hot_standby=on 
      -c hot_standby_feedback=on
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - nestjs-boilerplate-network

  redis:
    image: redis:7.0.1-alpine
    container_name: nestjs-boilerplate-redis
    restart: unless-stopped
    ports:
      - '${DOCKER_REDIS_PORT}:6379'
    environment:
      REDIS_ARGS: '--requirepass ${REDIS_PASSWORD}'
    volumes:
      - ./.docker/data/redis:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
    command: 'redis-server --save 120 1 --loglevel warning'
    networks:
      - nestjs-boilerplate-network

  zero:
    container_name: nestjs-boilerplate-zero
    image: nestjs-boilerplate-zero:latest
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile.zero
    ports:
      - '${DOCKER_ZERO_PORT}:4848'
    networks:
      - nestjs-boilerplate-network

networks:
  nestjs-boilerplate-network:
    name: nestjs-boilerplate-network
    driver: bridge
